{"version":3,"sources":["components/Display.jsx","components/ClearBtn.jsx","components/OperatorBtn.jsx","components/NumBtn.jsx","components/DecimalBtn.jsx","components/EqualsBtn.jsx","App.jsx","index.jsx"],"names":["Display","props","id","className","equation","input","ClearBtn","onClick","handler","OperatorBtn","operator","dangerouslySetInnerHTML","__html","NumBtn","number","Number","num","DecimalBtn","EqualsBtn","App","state","handleClearBtnClick","bind","handleOperatorBtnClick","handleNumBtnClick","handleDecimalBtnClick","handleEqualsBtnClick","this","setState","event","target","prevState","prevInput","prevEquation","isNaN","includes","length","slice","numberId","String","indexOf","calculate","stringEquation","ex","operators","split","map","cur","reduce","prev","idx","multiplyAndDivide","subtractAndAddAfterMultyplyAndDivide","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ada9d914.chunk.js","sourcesContent":["\r\nfunction Display(props) {\r\n    return (\r\n        <div id='display' className='display grid-item'>\r\n            <p id='equation'>{props.equation}</p>\r\n            <p id='inputValue'>{props.input}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","\r\nfunction ClearBtn(props) {\r\n    return (\r\n        <div id=\"clear\" className='clear grid-item btn' onClick={props.handler}>AC</div>\r\n    );\r\n}\r\n\r\nexport default ClearBtn;","\r\nfunction OperatorBtn(props) {\r\n    const symbolNames = {\r\n        \"divide\": \"/\",\r\n        \"multiply\": \"x\",\r\n        \"subtract\": \"-\",\r\n        \"add\": \"+\",\r\n    }\r\n    \r\n    return (\r\n        <div id={props.operator} className='operators grid-item btn' onClick={props.handler} dangerouslySetInnerHTML={{ __html: symbolNames[props.operator]}}></div>\r\n    );\r\n}\r\n\r\nexport default OperatorBtn;","\r\nfunction NumBtn(props) {\r\n    const number = Number(props.num);\r\n    const numberNames = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'decimal']\r\n\r\n    return (\r\n        <div id={numberNames[number]} className='numbers grid-item btn' onClick={props.handler}>{number}</div>\r\n    );\r\n}\r\n\r\nexport default NumBtn;","\r\nfunction DecimalBtn(props) {\r\n    return (\r\n        <div id='decimal' className='numbers grid-item btn' onClick={props.handler}>.</div>\r\n    );\r\n}\r\n\r\nexport default DecimalBtn;","\r\nfunction EqualsBtn(props) {\r\n    return (\r\n        <div id=\"equals\" className='equals grid-item btn' onClick={props.handler}>=</div>\r\n    );\r\n}\r\n\r\nexport default EqualsBtn;","import React from 'react';\r\nimport './scss/style.css';\r\nimport Display from './components/Display';\r\nimport ClearBtn from './components/ClearBtn';\r\nimport OperatorBtn from './components/OperatorBtn';\r\nimport NumBtn from './components/NumBtn';\r\nimport DecimalBtn from './components/DecimalBtn';\r\nimport EqualsBtn from './components/EqualsBtn';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            input: '0',\r\n            equation: '',\r\n        }\r\n\r\n        this.handleClearBtnClick = this.handleClearBtnClick.bind(this);\r\n        this.handleOperatorBtnClick = this.handleOperatorBtnClick.bind(this);\r\n        this.handleNumBtnClick = this.handleNumBtnClick.bind(this);\r\n        this.handleDecimalBtnClick = this.handleDecimalBtnClick.bind(this);\r\n        this.handleEqualsBtnClick = this.handleEqualsBtnClick.bind(this);\r\n    }\r\n\r\n    handleClearBtnClick() {\r\n        this.setState({\r\n            input: '0',\r\n            equation: '',\r\n        });\r\n    }\r\n\r\n    handleOperatorBtnClick(event) {\r\n        const operatorId = event.target.id;\r\n        const symbolNames = {\r\n            \"divide\": \"/\",\r\n            \"multiply\": \"x\",\r\n            \"subtract\": \"-\",\r\n            \"add\": \"+\",\r\n        }\r\n        const operator = symbolNames[operatorId];\r\n\r\n        this.setState((prevState) => {\r\n            const prevInput = prevState.input;\r\n            const prevEquation = prevState.equation;\r\n\r\n            // If previous answer is not cleared take it as first number and insert operator after that\r\n            // check whether already given a operator or not.\r\n            // If already given, ols operator will replace by new operator.\r\n            if (prevEquation === '' && prevInput !== '0' && !isNaN(prevInput)) {\r\n                return {\r\n                    input: operator,\r\n                    equation: prevInput + operator,\r\n                }\r\n            } else if (['+', '-', 'x', '/', '.'].includes(prevInput[prevInput.length-1])) {\r\n                return {\r\n                    input: operator,\r\n                    equation: prevEquation.slice(0, -1) + operator,\r\n                }\r\n            } else {\r\n                return {\r\n                    input: operator,\r\n                    equation: prevEquation + operator,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleNumBtnClick(event) {\r\n        const numberId = event.target.id;\r\n        const numberNames = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\r\n        const number = String(numberNames.indexOf(numberId));\r\n\r\n        this.setState((prevState) => {\r\n            const prevInput = prevState.input;\r\n            const prevEquation = prevState.equation;\r\n\r\n            // consider for entering minus value,\r\n            // remove unnecessary zeroes and operators in the begining,\r\n            // and combine digits for values that have more than one digit\r\n            if (prevEquation === '-') {\r\n                return ({\r\n                    input: '-'+number,\r\n                    equation: '-'+number,\r\n                });\r\n            } else if (prevEquation === '' || prevEquation === '0' || ['+', '-', 'x', '/'].includes(prevEquation)) {\r\n                return ({\r\n                    input: number,\r\n                    equation: number,\r\n                });\r\n            } else if (prevInput === '0' || ['+', '-', 'x', '/'].includes(prevInput)) {\r\n                return ({\r\n                    input: number,\r\n                    equation: prevEquation + number,\r\n                });\r\n            } else if (typeof(Number(prevInput)) === 'number') {\r\n                return ({\r\n                    input: prevInput + number,\r\n                    equation: prevEquation + number,\r\n                })\r\n            } else {\r\n                return ({\r\n                    input: number,\r\n                    equation: String(prevState.equation) + number,\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    handleDecimalBtnClick() {\r\n        \r\n        this.setState((prevState) => {\r\n            const prevInput = prevState.input;\r\n            const prevEquation = prevState.equation;\r\n\r\n            // replace decimal with unnecessary operators\r\n            // and prevent accidentaly entering more than one decimal operator\r\n            if (prevEquation === '-') {\r\n                return {\r\n                    input: '-0.',\r\n                    equation: '-0.',\r\n                }\r\n            } else if (prevEquation === '' || ['+', 'x', '/'].includes(prevEquation)) {\r\n                return {\r\n                    input: '0.',\r\n                    equation: '0.',\r\n                }\r\n            } else if (prevInput[prevInput.length-1] === '.') {\r\n                return {\r\n                    input: prevInput,\r\n                    equation: prevEquation,\r\n                }\r\n            } else if (['+', '-', 'x', '/', '.'].includes(prevEquation[prevEquation.length-1])) {\r\n                return {\r\n                    input: '0.',\r\n                    equation: prevEquation + '0.',\r\n                }\r\n            } else {\r\n                return {\r\n                    input: prevInput + '.',\r\n                    equation: prevEquation + '.',\r\n                }\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n    handleEqualsBtnClick() {\r\n        \r\n        this.setState((prevState) => {\r\n            const prevInput = prevState.input;\r\n            const prevEquation = prevState.equation;\r\n\r\n            // function for calculate final answer from the given string of equation ##############\r\n            function calculate(stringEquation) {\r\n\r\n                // If first number is negetive add a zero in the begining\r\n                // ex: (-5+5) => (0-5+5)\r\n                if(stringEquation[0] === '-') {\r\n                    stringEquation = '0' + stringEquation;\r\n                }\r\n\r\n                // helper function for\r\n                // do multiplication and devision from left to right\r\n                const multiplyAndDivide = (ex) => {    \r\n                    const operators = ex.split(/[0-9]+[.]*[0-9]*/);\r\n                    return ex.split(/[x|/]/).reduce( (prev, cur, idx) => (operators[idx] === 'x') ? Number(prev)*Number(cur) : Number(prev)/Number(cur) )\r\n                }\r\n\r\n                // 1. split the full equation by (+ or -) symbols into parts that only contain numbers and (x, /)symbols\r\n                        // ex: '1+2x3+4/5+6-7' => ['1', '2x3', '4/5', '6', '7']\r\n                // 2. then map each element of the above array by multiplyAndDivide function\r\n                        // ex: '2x3' => '6'\r\n                        // ex: '4/5' => '0.8'\r\n                // 3. then add and subtract from left to right\r\n                const subtractAndAddAfterMultyplyAndDivide = (ex) => {                    \r\n                    const operators = ex.split(/[0-9]+[.]*[0-9]*/);\r\n                    return ex.split(/[+|-]/).map( (cur) => multiplyAndDivide(cur)).reduce( (prev, cur, idx) => (operators[idx] === '+') ? Number(prev)+Number(cur) : Number(prev)-Number(cur) )\r\n                }\r\n\r\n                return subtractAndAddAfterMultyplyAndDivide(stringEquation);\r\n            }\r\n            // End of the calculate fuction #######################################################\r\n\r\n            if (!isNaN(prevInput)) {\r\n                const answer = calculate(prevEquation);\r\n\r\n                return {\r\n                    input: answer,\r\n                    equation: '',\r\n                }\r\n            } else {\r\n                const answer =  calculate(prevEquation.slice(0, -1));\r\n\r\n                return {\r\n                    input: answer,\r\n                    equation: '',\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"calculator\">\r\n                <Display equation={this.state.equation} input={this.state.input} />\r\n                <ClearBtn handler={this.handleClearBtnClick} />\r\n                <OperatorBtn operator='divide' handler={this.handleOperatorBtnClick} /><OperatorBtn operator='multiply' handler={this.handleOperatorBtnClick}/>\r\n                <NumBtn num='7' handler={this.handleNumBtnClick} /><NumBtn num='8' handler={this.handleNumBtnClick} /><NumBtn num='9' handler={this.handleNumBtnClick} /><OperatorBtn operator='subtract' handler={this.handleOperatorBtnClick} />\r\n                <NumBtn num='4' handler={this.handleNumBtnClick} /><NumBtn num='5' handler={this.handleNumBtnClick} /><NumBtn num='6' handler={this.handleNumBtnClick} /><OperatorBtn operator='add' handler={this.handleOperatorBtnClick} />\r\n                <NumBtn num='1' handler={this.handleNumBtnClick} /><NumBtn num='2' handler={this.handleNumBtnClick} /><NumBtn num='3' handler={this.handleNumBtnClick} /><EqualsBtn handler={this.handleEqualsBtnClick} />\r\n                <NumBtn num='0' handler={this.handleNumBtnClick} /><DecimalBtn handler={this.handleDecimalBtnClick} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}